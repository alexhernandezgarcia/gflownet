import numpy.typing as npt
import numpy as np


from rdkit import Chem
from rdkit.Chem import AllChem, rdMolTransforms
from rdkit.Geometry.rdGeometry import Point3D

def get_rdkit_molecule(smiles: str, add_hydrogens=True):
    mol = Chem.MolFromSmiles(smiles)
    if add_hydrogens:
        mol = Chem.AddHs(mol)
    return mol

def get_rdkit_conformer(smiles: str, extra_opt=False, add_hydrogens=True):
    """
    Returns a conformer generated by rdkit
    
    Args
    ----
    smiles : str 
        SMILES of a molecule
    extra_opt: bool 
        If true, applies additional optimisation to the conformer
    add_hydrogens : bool
        If true, adds hydrogens to the molecule


    Returns
    -------
    rdkit conformer object
    """
    mol = get_rdkit_molecule(smiles, add_hydrogens=add_hydrogens)
    AllChem.EmbedMolecule(mol, randomSeed=0)
    if extra_opt:
        AllChem.MMFFOptimizeMolecule(mol, confId=0, maxIters=1000)
    return mol.GetConformer()

def get_rdkit_atom_positions(smiles: str, extra_opt=False, add_hydrogens=True) -> npt.NDArray:
    """
    Returns positions of the atoms generated by rdkit
    
    Args
    ----
    smiles : str 
        SMILES of a molecule
    extra_opt: bool 
        If true, applies additional optimisation to the conformer
    add_hydrogens : bool
        If true, adds hydrogens to the molecule


    Returns
    -------
    np.array of atom 3D positions with a shape [n_atoms, 3]
    """
    conformer = get_rdkit_conformer(smiles, extra_opt=extra_opt, add_hydrogens=add_hydrogens) 
    return conformer.GetPositions() 

def get_rdkit_torsion_angles_values(rdkit_conf, torsion_angles_atoms_list):
    return [
        np.float32(rdMolTransforms.GetDihedralRad(rdkit_conf, *ta))
        for ta in torsion_angles_atoms_list
    ]

def set_rdkit_atom_positions(rdkit_conf, atom_positions):
        """Set atom positions of the rdkit_conf to the input atom_positions values
        :param atom_positions: 2d numpy array of shape [num atoms, 3] with new atom positions
        """
        for idx, pos in enumerate(atom_positions):
            rdkit_conf.SetAtomPosition(idx, Point3D(*pos))
        return rdkit_conf
